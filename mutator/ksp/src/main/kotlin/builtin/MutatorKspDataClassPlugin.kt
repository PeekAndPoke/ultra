package de.peekandpoke.mutator.ksp.builtin

import com.google.devtools.ksp.getDeclaredProperties
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSDeclaration
import de.peekandpoke.mutator.ksp.MutatorCodeBlocks.Companion.ListMutatorName
import de.peekandpoke.mutator.ksp.MutatorCodeBlocks.Companion.ObjectMutatorName
import de.peekandpoke.mutator.ksp.MutatorCodeBlocks.Companion.SetMutatorName
import de.peekandpoke.mutator.ksp.MutatorKspPlugin
import de.peekandpoke.mutator.ksp.MutatorKspPlugin.MutatorGeneratorContext
import de.peekandpoke.mutator.ksp.isData
import de.peekandpoke.mutator.ksp.isPrimaryCtorParameter
import de.peekandpoke.mutator.ksp.isSealed

class MutatorKspDataClassPlugin : MutatorKspPlugin {

    override val name = "BuiltIn: Data Class Plugin"

    override fun generatesMutatorFor(type: KSDeclaration): Boolean {
        return type is KSClassDeclaration && (type.isData() || type.isSealed())
    }

    override fun generateForClass(ctx: MutatorGeneratorContext) {
        val cls = ctx.cls
        val codeBlocks = ctx.codeBlocks
        val plugins = ctx.plugins

        val clsName = codeBlocks.getClassNameWithTypeParams(cls)
        val typeParams = codeBlocks.getTypeParamsWithBounds(cls)?.plus(" ") ?: ""

        codeBlocks.append("// Mutator for data class $clsName (${cls.qualifiedName?.asString()})")
        codeBlocks.append("// Generated by the '${this.name}' plugin")

        val allFields = cls.getDeclaredProperties()
        val ctorFields = allFields.filter { it.isPrimaryCtorParameter() }

        val boundObjectMutatorName = "${ObjectMutatorName}<${clsName}>"

        codeBlocks.append(
            """
                @MutatorDsl
                inline fun $typeParams$clsName.mutator() = $ObjectMutatorName(this)
                
                @MutatorDsl
                inline fun $typeParams$clsName.mutate(
                    mutation: $boundObjectMutatorName.() -> Unit,
                ): $clsName = mutator().apply(mutation).get()
                
                @MutatorDsl
                inline fun ${typeParams}List<$clsName>.mutate(
                    mutation: $ListMutatorName<$clsName>.() -> Unit,
                ): List<$clsName> = mutator(child = { mutator() }).apply(mutation).get()
                
                @MutatorDsl
                inline fun ${typeParams}Set<$clsName>.mutate(
                    mutation: $SetMutatorName<$clsName>.() -> Unit,
                ): Set<$clsName> = mutator(child = { mutator() }).apply(mutation).get()
                
            """.trimIndent()
        )

        if (cls.isData()) {
            ctorFields.forEach { field ->
                // Is this field if a Mutable type?
                if (plugins.hasMutatorGenerator(field.type.resolve().declaration)) {
                    codeBlocks.addObjectMutatorField(cls, field)
                } else {
                    codeBlocks.addObjectPureField(cls, field)
                }
            }
        }
    }
}
