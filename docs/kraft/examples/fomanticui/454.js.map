{"version":3,"file":"454.js","mappings":"iGAAC,SAAUA,GACVA,EAAMC,UAAUC,KAAOF,EAAMC,UAAUE,OAAO,MAAO,CAEpD,QAAW,CACVC,QAAS,gDACTC,YAAY,EACZC,QAAQ,KAIVN,EAAMC,UAAUM,aAAa,OAAQ,SAAU,CAE9C,cAAe,CAEdH,QAAS,sBACTE,QAAQ,EACRE,OAAQ,CACP,OAAU,8BAINR,EAAMC,UAAUC,KAAKO,OAG5B,IAAIC,EAAW,yBACXC,EAAW,CACd,2CACA,CACCP,QAAS,cACTC,YAAY,IAIdL,EAAMC,UAAUM,aAAa,OAAQ,WAAY,CAEhD,gBAAiB,CAChBH,QAAS,eACTE,QAAQ,EACRE,OAAQ,CACP,YAAe,IACf,SAAYE,EACZ,SAAYC,IAId,gBAAiB,CAChBP,QAAS,qCACTE,QAAQ,EACRE,OAAQ,CACP,SAAY,CACX,kBACA,CACCJ,QAAS,aACTC,YAAY,IAGd,YAAe,IACf,SAAYK,EACZ,SAAYC,EACZ,UAAaX,EAAMC,UAAUC,KAAKU,qBAI9BZ,EAAMC,UAAUC,KAAKW,gBACrBb,EAAMC,UAAUC,KAAKU,UAI5BZ,EAAMC,UAAUM,aAAa,OAAQ,cAAe,CACnD,SAAY,CACXH,QAAS,yHACTC,YAAY,EACZC,QAAQ,IAIX,CA5EA,CA4EEN,M","sources":["webpack://fomanticui/../../node_modules/prismjs/components/prism-sass.js"],"sourcesContent":["(function (Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n}(Prism));\n"],"names":["Prism","languages","sass","extend","pattern","lookbehind","greedy","insertBefore","inside","atrule","variable","operator","important","property"],"sourceRoot":""}