{"version":3,"file":"263.js","mappings":"iGAAC,SAAUA,GAEVA,EAAMC,UAAUC,WAAaF,EAAMC,UAAUE,OAAO,aAAc,CACjE,aAAc,CACbC,QAAS,+KACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAET,QAAW,0FAIZP,EAAMC,UAAUC,WAAWM,QAAQC,KAClC,qDAEA,2FAEA,qCAIMT,EAAMC,UAAUC,WAAsB,iBACtCF,EAAMC,UAAUC,WAAW,oBAGlC,IAAIQ,EAAaV,EAAMC,UAAUE,OAAO,aAAc,CAAC,UAChDO,EAAW,cAElBV,EAAMC,UAAUC,WAAW,cAAcK,OAASG,EAElDV,EAAMC,UAAUU,aAAa,aAAc,WAAY,CACtD,UAAa,CACZP,QAAS,qBACTG,OAAQ,CACP,GAAM,CACLH,QAAS,KACTQ,MAAO,YAER,SAAY,aAGd,mBAAoB,CAEnBR,QAAS,yGACTE,QAAQ,EACRC,OAAQ,CACP,SAAY,4DACZ,QAAW,CACVH,QAAS,WACTQ,MAAO,aACPL,OAAQG,OAMZV,EAAMC,UAAUY,GAAKb,EAAMC,UAAUC,UAEtC,CA3DA,CA2DEF,M","sources":["webpack://fomanticui/../../node_modules/prismjs/components/prism-typescript.js"],"sourcesContent":["(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n\t\t// This is for `import type *, {}`\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\tdelete Prism.languages.typescript['literal-property'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n"],"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","keyword","push","typeInside","insertBefore","alias","ts"],"sourceRoot":""}